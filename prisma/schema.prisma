generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_URL")
    directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
    id Int @id @default(autoincrement())

    fullName String
    email    String   @unique
    password String
    role     UserRole @default(USER)
    verified DateTime

    provider   String?
    providerId String?

    cart             Cart?
    orders           Order[]
    verificationCode VerificationCode?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Category {
    id   Int    @id @default(autoincrement())
    name String @unique

    products  Product[]
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
}

model Product {
    id Int @id @default(autoincrement())

    name     String
    imageUrl String

    ingradients Ingradient[]
    items       ProductItem[]

    category   Category @relation(fields: [categoryId], references: [id])
    categoryId Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ProductItem {
    id Int @id @default(autoincrement())

    price     Int
    size      Int?
    pizzaType Int?

    cartItems CartItem[]

    product   Product @relation(fields: [productId], references: [id])
    productId Int
}

model Ingradient {
    id Int @id @default(autoincrement())

    name     String
    price    Int
    imageUrl String

    products Product[]

    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    CartItem   CartItem? @relation(fields: [cartItemId], references: [id])
    cartItemId Int?
}

model Cart {
    id Int @id @default(autoincrement())

    user   User? @relation(fields: [userId], references: [id])
    userId Int?  @unique

    items CartItem[]

    token String

    totalAmount Int @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model CartItem {
    id Int @id @default(autoincrement())

    productItem   ProductItem @relation(fields: [productItemId], references: [id])
    productItemId Int

    cart   Cart @relation(fields: [cardId], references: [id])
    cardId Int

    quantity Int
    // pizzaSize Int?
    // pizzaType Int? 

    ingradients Ingradient[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Order {
    id Int @id @default(autoincrement())

    user   User? @relation(fields: [userId], references: [id])
    userId Int

    token String

    totalAmount Int
    status      OrderStatus
    paymentId   String

    items Json

    fullName String
    email    String
    phone    String
    address  String
    comment  String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationCode {
    id Int @id @default(autoincrement())

    user   User @relation(fields: [userId], references: [id])
    userId Int  @unique

    code String @unique

    createdAt DateTime @default(now())

    @@unique([userId, code])
}

enum OrderStatus {
    PENDING
    SUCCEEDED
    CANCELLED
}

enum UserRole {
    USER
    ADMIN
}
